# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.python':
  'Start_Code':
    'prefix': 'code'
    'body': 'def fn(args):\n\nA=map(int, raw_input.split())'

  'DP Recursion code':
    'prefix': 'dp'
    'body': 'def fn(args, cache):\n\n\tkey=( , )\n\tif key in cache:\n\t\tvalue=cache[key]\n\telse:\n\n\t\n\treturn value\n\nA = map(int, raw_input().split())\n\nfn(args, {})'

  'Recursion Start Code':
    'prefix': 'rec_code'
    'body': 'import functools\nimport sys\ndef memoize(f):\n\tcache = {}\n\t@functools.wraps(f)\n\tdef newfunc(*args):\n\t\targs = tuple(args)\n\t\tif args not in cache:\n\t\t\tcache[args] = f(*args)\n\t\treturn cache[args]\n\treturn newfunc\n\n@memoize\ndef fn(args):\n\nA=map(int, raw_input.split())'

  'Input':
    'prefix': 'inp'
    'body': 'raw_input()'

  'int Input':
    'prefix': 'num'
    'body': '$1 = int(raw_input())'

  'Array Input':
    'prefix': 'map'
    'body': '${1:A} = map(int, raw_input().split())'

  'Array Append':
    'prefix': 'app'
    'body': 'append($1)'

  'Function':
    'prefix': 'fn'
    'body': 'def ${1:function}(${2:args}):\n\n\t${3:return}'

  'For Loop':
    'prefix': 'for'
    'body': 'for $1 in range($2):\n\t'

  'if':
    'prefix': 'if'
    'body': 'if(${1:condition}):\n\t'

  'if/else':
    'prefix': 'ifel'
    'body': 'if(${1:condition}):\n\t\nelse:\n\t'

  'Try/Except':
    'prefix': 'te'
    'body': 'try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}'

  'Import':
    'prefix': 'imp'
    'body': 'import $1'
